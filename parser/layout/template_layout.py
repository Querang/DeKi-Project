# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'template_parse_label.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class GenerateParseLabel(QtWidgets.QGroupBox):
    def __init__(self, parent, data):
        super(GenerateParseLabel, self).__init__(parent=parent)
        self.site_text_pull, self.tag_text, self.action_text, self.mark_text = data
        self.setGeometry(QtCore.QRect(0, 0, 398, 182))
        self.setMinimumSize(QtCore.QSize(398, 182))
        self.setMaximumSize(QtCore.QSize(398, 182))
        self.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.setTitle("")
        self.setObjectName("parser_label")
        self.parser_label_sub = QtWidgets.QFrame(self)
        self.parser_label_sub.setGeometry(QtCore.QRect(0, 0, 398, 51))
        self.parser_label_sub.setStyleSheet("background: #181818;")
        self.parser_label_sub.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.parser_label_sub.setFrameShadow(QtWidgets.QFrame.Raised)
        self.parser_label_sub.setObjectName("parser_label_sub")
        self.icon_mark = QtWidgets.QLabel(self.parser_label_sub)
        self.icon_mark.setGeometry(QtCore.QRect(0, 0, 51, 51))
        self.icon_mark.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.icon_mark.setText("")
        self.icon_mark.setPixmap(QtGui.QPixmap("../material/mark_icon/bell.png"))
        self.icon_mark.setAlignment(QtCore.Qt.AlignCenter)
        self.icon_mark.setObjectName("icon_mark")
        self.site_text = QtWidgets.QTextBrowser(self.parser_label_sub)
        self.site_text.setGeometry(QtCore.QRect(60, 4, 221, 21))
        self.site_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 300;\n"
                                     "font-size: 13px;\n"
                                     "line-height: 17px;\n"
                                     "text-decoration-line: underline;\n"
                                     "background: rgba(44, 40, 40, 0.0);\n"
                                     "color: #FFFFFF;\n"
                                     "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.site_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setObjectName("site_text")
        self.element_text = QtWidgets.QTextBrowser(self.parser_label_sub)
        self.element_text.setGeometry(QtCore.QRect(60, 26, 181, 21))
        self.element_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 17px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.element_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.element_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.element_text.setObjectName("element_text")
        self.pause = QtWidgets.QPushButton(self.parser_label_sub)
        self.pause.setGeometry(QtCore.QRect(300, 13, 21, 21))
        self.pause.setStyleSheet("color: #FFFFFF;\n"
                                 "background: rgba(199, 199, 199, 0.0);")
        self.pause.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../DeKi-Project/parser/material/pause_1.png"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        self.pause.setIcon(icon)
        self.pause.setIconSize(QtCore.QSize(14, 10))
        self.pause.setObjectName("pause")
        self.status_icon = QtWidgets.QPushButton(self.parser_label_sub)
        self.status_icon.setGeometry(QtCore.QRect(330, 13, 21, 21))
        self.status_icon.setStyleSheet("color: #FFFFFF;\n"
                                       "background: rgba(199, 199, 199, 0.0);")
        self.status_icon.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../../../DeKi-Project/parser/material/good_connect_ver_2.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.status_icon.setIcon(icon1)
        self.status_icon.setIconSize(QtCore.QSize(16, 20))
        self.status_icon.setObjectName("status_icon")
        self.extend = QtWidgets.QPushButton(self.parser_label_sub)
        self.extend.setGeometry(QtCore.QRect(360, 13, 21, 21))
        self.extend.setStyleSheet("color: #FFFFFF;\n"
                                  "background: rgba(199, 199, 199, 0.0);")
        self.extend.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../../../../DeKi-Project/parser/material/tree_point.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.extend.setIcon(icon2)
        self.extend.setIconSize(QtCore.QSize(20, 20))
        self.extend.setObjectName("extend")
        self.briefly_info_frame = QtWidgets.QFrame(self)
        self.briefly_info_frame.setGeometry(QtCore.QRect(0, 53, 398, 131))
        self.briefly_info_frame.setStyleSheet("background: #181818;\n"
                                              "border: 1px solid #646464;")
        self.briefly_info_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.briefly_info_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.briefly_info_frame.setObjectName("briefly_info_frame")
        self.briefly_info = QtWidgets.QTextBrowser(self.briefly_info_frame)
        self.briefly_info.setGeometry(QtCore.QRect(10, 10, 371, 111))
        self.briefly_info.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 10px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.briefly_info.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setObjectName("briefly_info")

        self.site_text.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">{self.site_text_pull}<br /><br /></span></p></body></html>")
        self.element_text.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">element: 10 uncheced: 5</span></p></body></html>")
        self.briefly_info.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">site: </span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">tag:                          element:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">action:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">mark:</span></p></body></html>")


class Dialog_get_date(QtWidgets.QDialog):
    def __init__(self, position):
        super(Dialog_get_date, self).__init__()
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.position_x, self.position_y = position
        self.setGeometry(QtCore.QRect(self.position_x + 550, self.position_y + 300, 517, 190))
        self.setStyleSheet("background: #181818;\n"
                           "border: 1px solid #646464;")
        self.descr = QtWidgets.QTextBrowser(self)
        self.descr.setGeometry(QtCore.QRect(10, 20, 431, 161))
        self.descr.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                 "font-weight: 200;\n"
                                 "font-size: 13px;\n"
                                 "line-height: 10px;\n"
                                 "text-decoration-line: underline;\n"
                                 "background: rgba(44, 40, 40, 0.0);\n"
                                 "color: rgba(255, 255, 255, 0.8);\n"
                                 "\n"
                                 "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setObjectName("descr")
        self.tag_choice = QtWidgets.QComboBox(self)
        self.tag_choice.setGeometry(QtCore.QRect(70, 61, 151, 20))
        self.tag_choice.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.tag_choice.setDuplicatesEnabled(False)
        self.tag_choice.setFrame(True)
        self.tag_choice.setObjectName("tag_choice")
        self.action_choice = QtWidgets.QComboBox(self)
        self.action_choice.setGeometry(QtCore.QRect(70, 100, 151, 20))
        self.action_choice.setStyleSheet("background: #2B2B2B;\n"
                                         "border-radius: 4px;\n"
                                         "font-family: \'Roboto Mono\';\n"
                                         "font-style: normal;\n"
                                         "font-weight: 400;\n"
                                         "font-size: 14px;\n"
                                         "line-height: 18px;\n"
                                         "\n"
                                         "color: rgba(255, 255, 255, 0.8);\n"
                                         "")
        self.action_choice.setDuplicatesEnabled(False)
        self.action_choice.setFrame(True)
        self.action_choice.setObjectName("action_choice")
        self.site_line = QtWidgets.QLineEdit(self)
        self.site_line.setGeometry(QtCore.QRect(70, 28, 241, 20))
        self.site_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.site_line.setText("")
        self.site_line.setPlaceholderText("your site")
        self.site_line.setObjectName("site_line")
        self.mark_line = QtWidgets.QLineEdit(self)
        self.mark_line.setGeometry(QtCore.QRect(70, 150, 291, 20))
        self.mark_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.mark_line.setText("")
        self.mark_line.setPlaceholderText("maybe you want marked this?")
        self.mark_line.setObjectName("mark_line")
        self.element_choice = QtWidgets.QComboBox(self)
        self.element_choice.setGeometry(QtCore.QRect(320, 60, 151, 20))
        self.element_choice.setStyleSheet("background: #2B2B2B;\n"
                                          "border-radius: 4px;\n"
                                          "font-family: \'Roboto Mono\';\n"
                                          "font-style: normal;\n"
                                          "font-weight: 400;\n"
                                          "font-size: 14px;\n"
                                          "line-height: 18px;\n"
                                          "\n"
                                          "color: rgba(255, 255, 255, 0.8);\n"
                                          "")
        self.element_choice.setDuplicatesEnabled(False)
        self.element_choice.setFrame(True)
        self.element_choice.setObjectName("element_choice")
        self.continue_button = QtWidgets.QPushButton(self)
        self.continue_button.setGeometry(QtCore.QRect(420, 150, 81, 23))
        self.continue_button.setStyleSheet("QPushButton {\n"
                                           "font-family: \'Roboto Mono\';\n"
                                           "font-style: normal;\n"
                                           "font-weight: 400;\n"
                                           "font-size: 18px;\n"
                                           "line-height: 18px;\n"
                                           "border: 0px solid #646464;\n"
                                           "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                           "QPushButton:hover{\n"
                                           "color: rgba(255, 255, 255, 1.0)\n"
                                           "}")
        self.continue_button.setObjectName("continue_button")
        self.button_close = QtWidgets.QPushButton(self)
        self.button_close.setGeometry(QtCore.QRect(490, 0, 21, 23))
        self.button_close.setStyleSheet("QPushButton {\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 18px;\n"
                                        "line-height: 18px;\n"
                                        "border: 0px solid #646464;\n"
                                        "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                        "QPushButton:hover{\n"
                                        "color: rgba(255, 255, 255, 1.0)\n"
                                        "}")
        self.button_close.setObjectName("button_close")
        self.value_line = QtWidgets.QLineEdit(self)
        self.value_line.setGeometry(QtCore.QRect(250, 100, 191, 20))
        self.value_line.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.value_line.setText("")
        self.value_line.setPlaceholderText("input value")
        self.value_line.setObjectName("value_line")
        self.descr.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">site: </span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">tag:                                          element:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">action:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">mark:</span></p></body></html>")
        self.continue_button.setText("continue")
        self.button_close.setText("X")
        """set fun"""
        self.button_close.clicked.connect(lambda: self.close())
        self.site_line.textChanged.connect(self.update_list_parse)
        """hide"""
        self.value_line.hide()
        """value"""
        self.site_text = ""
        self.action_list = ["track changes", "set condition"]  # set condition меет 3 подпункта на условия

    def update_list_parse(self):
        self.site_text = self.site_line.text()
        self.tag_list, self.element_list = "тут функция которая возвращает обнавленные значения принимает site_text"
        self.descr.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">site: {self.site_text} </span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">tag:                                          element:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">action:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">mark:</span></p></body></html>")

    def update_mark(self):
        self.mark_text = self.mark_line.text()
        self.descr.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">site: {self.site_text} </span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">tag:                                          element:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">action:</span></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\"><br /></p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Roboto Mono\'; font-weight:296;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Roboto Mono\'; font-size:11pt; font-weight:296;\">mark:{self.mark_text}</span></p></body></html>")

    @staticmethod
    def get_data():
        dialog = Dialog_get_date()
        dialog.exec_()
