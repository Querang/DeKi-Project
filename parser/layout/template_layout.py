# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'template_parse_label.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading
import time

from PyQt5 import QtCore, QtGui, QtWidgets
# from parser.parser_function import check_website
from bs4 import BeautifulSoup
import requests
import Firo_parse_sqlite


class GenerateParseLabel(QtWidgets.QGroupBox):
    def __init__(self, main_obj, data):
        super(GenerateParseLabel, self).__init__()
        """value"""
        self.main_obj = main_obj
        self.self_id, self.site_text_pull, self.tag_text, self.class_text, self.id_text, self.mark_text, self.action_text, self.action_value, self.notify, self.notify_time = data
        self.parser_container = ParserContainer()
        self.parser_container.url, self.parser_container.current_tag, self.parser_container.current_class, self.parser_container.current_id, self.parser_container.action = self.site_text_pull, self.tag_text, self.class_text, self.id_text, self.action_text
        self.conn = Firo_parse_sqlite.create_connection("parse_.db")
        self.amount_content = 0
        self.amount_unchecked_content = 0
        """value"""
        self.setMinimumSize(QtCore.QSize(398, 51))
        self.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.setTitle("")
        self.setObjectName("parser_label")
        self.parser_label_sub = QtWidgets.QFrame(self)
        self.parser_label_sub.setGeometry(QtCore.QRect(0, 0, 398, 51))
        self.parser_label_sub.setStyleSheet("background: #181818;")
        self.parser_label_sub.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.parser_label_sub.setFrameShadow(QtWidgets.QFrame.Raised)
        self.parser_label_sub.setObjectName("parser_label_sub")
        self.icon_mark = QtWidgets.QLabel(self.parser_label_sub)
        self.icon_mark.setGeometry(QtCore.QRect(0, 0, 51, 51))
        self.icon_mark.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.icon_mark.setText("")
        self.icon_mark.setPixmap(QtGui.QPixmap("../parser/material/mark_icon/bell.png"))
        self.icon_mark.setAlignment(QtCore.Qt.AlignCenter)
        self.icon_mark.setObjectName("icon_mark")
        self.site_text = QtWidgets.QTextBrowser(self.parser_label_sub)
        self.site_text.setGeometry(QtCore.QRect(60, 4, 221, 21))
        self.site_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 300;\n"
                                     "font-size: 13px;\n"
                                     "line-height: 17px;\n"
                                     "text-decoration-line: underline;\n"
                                     "background: rgba(44, 40, 40, 0.0);\n"
                                     "color: #FFFFFF;\n"
                                     "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.site_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setObjectName("site_text")
        self.element_text = QtWidgets.QTextBrowser(self.parser_label_sub)
        self.element_text.setGeometry(QtCore.QRect(60, 26, 181, 21))
        self.element_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 17px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.element_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.element_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.element_text.setObjectName("element_text")
        self.pause = QtWidgets.QPushButton(self.parser_label_sub)
        self.pause.setGeometry(QtCore.QRect(300, 13, 21, 21))
        self.pause.setStyleSheet("color: #FFFFFF;\n"
                                 "background: rgba(199, 199, 199, 0.0);")
        self.pause.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../parser/material/pause_1.png"), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        self.pause.setIcon(icon)
        self.pause.setIconSize(QtCore.QSize(14, 10))
        self.pause.setObjectName("pause")
        self.status_icon = QtWidgets.QPushButton(self.parser_label_sub)
        self.status_icon.setGeometry(QtCore.QRect(330, 13, 21, 21))
        self.status_icon.setStyleSheet("color: #FFFFFF;\n"
                                       "background: rgba(199, 199, 199, 0.0);")
        self.status_icon.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../parser/material/good_connect_ver_2.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.status_icon.setIcon(icon1)
        self.status_icon.setIconSize(QtCore.QSize(16, 20))
        self.status_icon.setObjectName("status_icon")
        self.extend = MenuLabel(self, self.parser_label_sub)
        self.extend.setGeometry(QtCore.QRect(360, 13, 21, 21))
        self.extend.setStyleSheet("color: #FFFFFF;\n"
                                  "background: rgba(199, 199, 199, 0.0);")
        self.extend.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../parser/material/tree_point.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.extend.setIcon(icon2)
        self.extend.setIconSize(QtCore.QSize(20, 20))
        self.extend.setObjectName("extend")
        self.briefly_info_frame = QtWidgets.QFrame(self)
        self.briefly_info_frame.setGeometry(QtCore.QRect(0, 53, 398, 131))
        self.briefly_info_frame.setStyleSheet("background: #181818;\n"
                                              "border: 1px solid #646464;")
        self.briefly_info_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.briefly_info_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.briefly_info_frame.setObjectName("briefly_info_frame")
        self.briefly_info = QtWidgets.QTextBrowser(self.briefly_info_frame)
        self.briefly_info.setGeometry(QtCore.QRect(10, 10, 398, 111))
        self.briefly_info.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 10px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.briefly_info.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setObjectName("briefly_info")

        self.site_text.setHtml(
            f"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"{self.site_text_pull}\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">{self.site_text_pull}<br /><br /></span></p></body></html>")
        self.element_text.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">element: {self.amount_content} unchecked: {self.amount_unchecked_content}</span></p></body></html>")
        self.briefly_info.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">site: {self.site_text_pull}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">tag: {self.tag_text}                          class:{self.class_text}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">action: {self.action_text}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">mark:{self.mark_text}</span></p></body></html>")

    def handler_content(self):
        pass


class MenuLabel(QtWidgets.QPushButton):

    def __init__(self, label_obj, parent):
        super(MenuLabel, self).__init__(parent)
        self.label_obj = label_obj

    def mousePressEvent(self, event):

        menu = QtWidgets.QMenu(self)
        menu.setStyleSheet("font-family: \'RobotoFlex\';\n"
                           "font-style: normal;\n"
                           "font-weight: 200;\n"
                           "font-size: 16px;\n"
                           "line-height: 75.4%;\n"
                           "/* or 14px */\n"
                           "background: rgba(199, 199, 199, 0.0);\n"
                           "border: 0.5px solid rgba(167, 167, 167, 0.01);\n"
                           "color: rgba(255, 255, 255, 0.85);\n"
                           "")
        Notify = menu.addMenu("Notify")
        Notify.addAction("Yes")
        Notify.addAction("No")
        Show = menu.addMenu("Show")
        Notify_time = menu.addMenu('Notify_time')
        Notify_time.addAction("5 min")
        Notify_time.addAction("15 min")
        Notify_time.addAction("1 hour")
        Show_minimalistic = Show.addAction("Show_minimalistic")
        Show_extend = Show.addAction("Show_extend")
        Delete = menu.addAction("Delete")
        result = menu.exec_(self.mapToGlobal(event.pos()))
        if Delete == result:
            Firo_parse_sqlite.delete_label(self.label_obj.conn, self.label_obj.self_id)
            self.label_obj.main_obj.load_label()
        elif Show_extend == result:
            self.label_obj.setMinimumSize(QtCore.QSize(398, 181))
        elif Show_minimalistic == result:
            self.label_obj.setMinimumSize(QtCore.QSize(398, 51))

        elif result == result:
            pass


class Dialog_get_date(QtWidgets.QDialog):
    def __init__(self, main_obj, position):
        super(Dialog_get_date, self).__init__()
        self.main_obj = main_obj
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.position_x, self.position_y = position
        self.setGeometry(QtCore.QRect(self.position_x + 550, self.position_y + 300, 517, 363))
        self.frame_site_1 = QtWidgets.QFrame(self)
        self.frame_site_1.setGeometry(QtCore.QRect(0, 0, 511, 55))
        self.frame_site_1.setStyleSheet("background: #181818;\n"
                                        "border: 1px solid #646464;\n"
                                        "box-sizing: border-box;\n"
                                        "border-radius: 4px;")
        self.frame_site_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_site_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_site_1.setObjectName("frame_site_1")
        self.site_label = Dialog_add_label(self.frame_site_1)
        self.site_label.setGeometry(QtCore.QRect(10, 9, 51, 31))
        self.site_label.setObjectName("site_label")
        self.site_line = QtWidgets.QLineEdit(self.frame_site_1)
        self.site_line.setGeometry(QtCore.QRect(80, 16, 341, 21))
        self.site_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.site_line.setInputMask("")
        self.site_line.setText("")
        self.site_line.setPlaceholderText("your sait")
        self.site_line.setObjectName("site_line")

        self.button_close = QtWidgets.QPushButton(self.frame_site_1)
        self.button_close.setGeometry(QtCore.QRect(484, 1, 21, 23))
        self.button_close.setStyleSheet("QPushButton {\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 18px;\n"
                                        "line-height: 18px;\n"
                                        "border: 0px solid #646464;\n"
                                        "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                        "QPushButton:hover{\n"
                                        "color: rgba(255, 255, 255, 1.0)\n"
                                        "}")
        self.button_close.setObjectName("button_close")
        self.frame_element_2 = QtWidgets.QFrame(self)
        self.frame_element_2.setGeometry(QtCore.QRect(0, 56, 511, 121))
        self.frame_element_2.setStyleSheet("background: #181818;\n"
                                           "border: 1px solid #646464;\n"
                                           "box-sizing: border-box;\n"
                                           "border-radius: 4px;")
        self.frame_element_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_element_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_element_2.setObjectName("frame_element_2")
        self.tag_label = Dialog_add_label(self.frame_element_2)
        self.tag_label.setGeometry(QtCore.QRect(10, 5, 61, 31))
        self.tag_label.setObjectName("tag_label")
        self.element_label = Dialog_add_label(self.frame_element_2)
        self.element_label.setGeometry(QtCore.QRect(10, 76, 81, 31))
        self.element_label.setObjectName("element_label")
        self.tag_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.tag_choice.setGeometry(QtCore.QRect(90, 10, 241, 20))
        self.tag_choice.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.tag_choice.setDuplicatesEnabled(False)
        self.tag_choice.setFrame(True)
        self.tag_choice.setObjectName("tag_choice")
        self.element_choice_2 = QtWidgets.QComboBox(self.frame_element_2)
        self.element_choice_2.setGeometry(QtCore.QRect(90, 82, 241, 20))
        self.element_choice_2.setStyleSheet("background: #2B2B2B;\n"
                                            "border-radius: 4px;\n"
                                            "font-family: \'Roboto Mono\';\n"
                                            "font-style: normal;\n"
                                            "font-weight: 400;\n"
                                            "font-size: 14px;\n"
                                            "line-height: 18px;\n"
                                            "\n"
                                            "color: rgba(255, 255, 255, 0.8);\n"
                                            "")
        self.element_choice_2.setDuplicatesEnabled(False)
        self.element_choice_2.setFrame(True)
        self.element_choice_2.setObjectName("element_choice_2")
        self.class_label = QtWidgets.QLabel(self.frame_element_2)
        self.class_label.setGeometry(QtCore.QRect(10, 40, 61, 31))
        self.class_label.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                       "font-weight: 200;\n"
                                       "font-size: 18px;\n"
                                       "line-height: 10px;\n"
                                       "text-decoration-line: underline;\n"
                                       "background: rgba(44, 40, 40, 0.0);\n"
                                       "color: rgba(255, 255, 255, 0.8);\n"
                                       "\n"
                                       "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.class_label.setObjectName("class_label")
        self.class_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.class_choice.setGeometry(QtCore.QRect(90, 45, 151, 20))
        self.class_choice.setStyleSheet("background: #2B2B2B;\n"
                                        "border-radius: 4px;\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 14px;\n"
                                        "line-height: 18px;\n"
                                        "\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "")
        self.class_choice.setDuplicatesEnabled(False)
        self.class_choice.setFrame(True)
        self.class_choice.setObjectName("class_choice")
        self.id_label = QtWidgets.QLabel(self.frame_element_2)
        self.id_label.setGeometry(QtCore.QRect(260, 40, 41, 31))
        self.id_label.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                    "font-weight: 200;\n"
                                    "font-size: 18px;\n"
                                    "line-height: 10px;\n"
                                    "text-decoration-line: underline;\n"
                                    "background: rgba(44, 40, 40, 0.0);\n"
                                    "color: rgba(255, 255, 255, 0.8);\n"
                                    "\n"
                                    "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.id_label.setObjectName("id_label")
        self.id_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.id_choice.setGeometry(QtCore.QRect(310, 45, 161, 20))
        self.id_choice.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.id_choice.setDuplicatesEnabled(False)
        self.id_choice.setFrame(True)
        self.id_choice.setObjectName("id_choice")
        self.frame_lock_1 = QtWidgets.QFrame(self.frame_element_2)
        self.frame_lock_1.setGeometry(QtCore.QRect(0, 0, 511, 121))
        self.frame_lock_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_lock_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_lock_1.setObjectName("frame_lock_1")
        self.descr = QtWidgets.QTextBrowser(self.frame_lock_1)
        self.descr.setGeometry(QtCore.QRect(90, 40, 211, 41))
        self.descr.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                 "font-weight: 200;\n"
                                 "font-size: 13px;\n"
                                 "line-height: 10px;\n"
                                 "text-decoration-line: underline;\n"
                                 "background: rgba(44, 40, 40, 0.0);\n"
                                 "color: rgba(255, 255, 255, 0.8);\n"
                                 "\n"
                                 "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setObjectName("descr")
        self.lock_label = QtWidgets.QLabel(self.frame_lock_1)
        self.lock_label.setEnabled(True)
        self.lock_label.setGeometry(QtCore.QRect(300, 10, 51, 51))
        self.lock_label.setStyleSheet("\n"
                                      "background: rgba(44, 40, 40, 0.0);\n"
                                      "\n"
                                      "\n"
                                      "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.lock_label.setText("")
        self.lock_label.setPixmap(QtGui.QPixmap("../parser/material/lock_icon_02.png"))
        self.lock_label.setScaledContents(True)
        self.lock_label.setObjectName("lock_label")
        self.frame_action_3 = QtWidgets.QFrame(self)
        self.frame_action_3.setGeometry(QtCore.QRect(0, 178, 511, 80))
        self.frame_action_3.setStyleSheet("background: #181818;\n"
                                          "border: 1px solid #646464;\n"
                                          "box-sizing: border-box;\n"
                                          "border-radius: 4px;")
        self.frame_action_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_action_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_action_3.setObjectName("frame_action_3")
        self.mark_line = QtWidgets.QLineEdit(self.frame_action_3)
        self.mark_line.setGeometry(QtCore.QRect(80, 46, 341, 21))
        self.mark_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.mark_line.setInputMask("")
        self.mark_line.setText("")
        self.mark_line.setPlaceholderText("maybe you want mark this parser?")
        self.mark_line.setObjectName("mark_line")
        self.label_4 = Dialog_add_label(self.frame_action_3)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 81, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = Dialog_add_label(self.frame_action_3)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 81, 31))
        self.label_5.setObjectName("label_5")
        self.action_choice = QtWidgets.QComboBox(self.frame_action_3)
        self.action_choice.setGeometry(QtCore.QRect(90, 17, 171, 20))
        self.action_choice.setStyleSheet("background: #2B2B2B;\n"
                                         "border-radius: 4px;\n"
                                         "font-family: \'Roboto Mono\';\n"
                                         "font-style: normal;\n"
                                         "font-weight: 400;\n"
                                         "font-size: 14px;\n"
                                         "line-height: 18px;\n"
                                         "\n"
                                         "color: rgba(255, 255, 255, 0.8);\n"
                                         "")
        self.action_choice.setDuplicatesEnabled(False)
        self.action_choice.setFrame(True)
        self.action_choice.setObjectName("action_choice")
        self.value_line = QtWidgets.QLineEdit(self.frame_action_3)
        self.value_line.setGeometry(QtCore.QRect(290, 17, 191, 20))
        self.value_line.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.value_line.setInputMask("")
        self.value_line.setText("")
        self.value_line.setPlaceholderText("input value")
        self.value_line.setObjectName("value_line")
        self.frame_lock_2 = QtWidgets.QFrame(self.frame_action_3)
        self.frame_lock_2.setGeometry(QtCore.QRect(0, 0, 511, 80))
        self.frame_lock_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_lock_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_lock_2.setObjectName("frame_lock_2")
        self.descr_2 = QtWidgets.QTextBrowser(self.frame_lock_2)
        self.descr_2.setGeometry(QtCore.QRect(90, 20, 211, 41))
        self.descr_2.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                   "font-weight: 200;\n"
                                   "font-size: 13px;\n"
                                   "line-height: 10px;\n"
                                   "text-decoration-line: underline;\n"
                                   "background: rgba(44, 40, 40, 0.0);\n"
                                   "color: rgba(255, 255, 255, 0.8);\n"
                                   "\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_2.setObjectName("descr_2")
        self.lock_label_1 = QtWidgets.QLabel(self.frame_lock_2)
        self.lock_label_1.setEnabled(True)
        self.lock_label_1.setGeometry(QtCore.QRect(300, 10, 51, 51))
        self.lock_label_1.setStyleSheet("\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.lock_label_1.setText("")
        self.lock_label_1.setPixmap(QtGui.QPixmap("../parser/material/lock_icon_02.png"))
        self.lock_label_1.setScaledContents(True)
        self.lock_label_1.setObjectName("lock_label_1")
        self.save_button = QtWidgets.QPushButton(self)
        self.save_button.setGeometry(QtCore.QRect(0, 259, 511, 25))
        self.save_button.setStyleSheet("\n"
                                       "font: 8pt \"NSimSun\";\n"
                                       "font-style: normal;\n"
                                       "font-weight: 300;\n"
                                       "font-size: 18px;\n"
                                       "line-height: 32px;\n"
                                       "\n"
                                       "color: #FFFFFF;background: #181818;\n"
                                       "border: 1px solid #646464;\n"
                                       "box-sizing: border-box;\n"
                                       "border-radius: 4px;")
        self.save_button.setObjectName("save_button")
        self.site_label.setText("Site:")
        self.button_close.setText("X")
        self.tag_label.setText("Tag:")
        self.element_label.setText("Content:")
        self.class_label.setText("class:")
        self.id_label.setText("id:")
        self.descr.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:13px;\">The seal is unlocked if you fill in the item above.</span></p></body></html>")
        self.label_4.setText("Action:")
        self.label_5.setText("Mark:")
        self.descr_2.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:13px;\">The seal is unlocked if you fill in the item above.</span></p></body></html>")
        self.save_button.setText("-- serfing --")
        self.frame_success = QtWidgets.QFrame(self)
        self.frame_success.setGeometry(QtCore.QRect(110 - 60, 100 - 20, 421, 121))
        self.frame_success.setStyleSheet("background: #181818;\n"
                                         "border: 1px solid #646464;\n"
                                         "box-sizing: border-box;\n"
                                         "border-radius: 4px;")
        self.frame_success.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_success.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_success.setObjectName("frame_success")
        self.descr_3 = QtWidgets.QTextBrowser(self.frame_success)
        self.descr_3.setGeometry(QtCore.QRect(90, 20, 251, 71))
        self.descr_3.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                   "font-weight: 200;\n"
                                   "font-size: 13px;\n"
                                   "line-height: 10px;\n"
                                   "text-decoration-line: underline;\n"
                                   "background: rgba(44, 40, 40, 0.0);\n"
                                   "color: rgba(255, 255, 255, 0.8);\n"
                                   "\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr_3.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setObjectName("descr_3")

        self.descr_3.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">Success!</span></p>\n"
            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Firo believes in you and hopes that you did not just click.</span></p></body></html>")

        """set fun"""
        # self.site_line.textChanged.connect(self.stage_1)
        self.tag_choice.setMinimumContentsLength(40)
        self.class_choice.setMinimumContentsLength(40)
        self.element_choice_2.setMinimumContentsLength(40)
        self.button_close.clicked.connect(self.close)
        self.save_button.clicked.connect(self.save_note)
        """success"""
        """hide"""
        self.value_line.hide()
        self.frame_success.hide()
        """value"""
        self.parse_container = ParserContainer()
        self.site_url = "https://bik.sfu-kras.ru/elib/view?id=BOOK1-84%284%D0%90%29-444/%D0%9C%20805-521870"
        self.action_list = ["...", "show content", "substring search",
                            "track change in content"]  # set condition меет 3 подпункта на условия
        self.action_choice.addItems(self.action_list)
        self.stage_1()

    def stage_1(self):
        # self.site_url = self.site_line.text()
        if check_website(self.site_url):
            self.frame_lock_1.hide()
            self.stage_2(self.site_url)
        else:
            self.frame_lock_1.show()

    def stage_2(self, site_url):
        self.parse_container.url = site_url
        self.parse_container.get_all_tag()
        self.parse_container.get_all_class()
        self.parse_container.get_all_id()
        self.load_checkbox()
        self.tag_choice.currentTextChanged.connect(lambda: self.update_current())
        self.class_choice.currentTextChanged.connect(lambda: self.update_current())
        self.id_choice.currentTextChanged.connect(lambda: self.update_current())
        self.action_choice.currentTextChanged.connect(lambda: self.update_current())

    def stage_3(self):
        if self.parse_container.content_list:
            self.frame_lock_2.hide()
        else:
            self.frame_lock_2.show()

    def save_note(self):
        if self.parse_container.action is not None:
            conn = Firo_parse_sqlite.create_connection("parse_.db")
            with conn:
                Firo_parse_sqlite.add_received_data(conn, self.parse_container.return_arguments())
                self.frame_success.show()
                threading.Thread(target=lambda: self.frame_success.show()).start()
                threading.Thread(target=self.main_obj.load_label()).start()
                threading.Thread(target=self.close_dialog).start()

    def close_dialog(self):
        time.sleep(3)
        self.close()

    def load_checkbox(self):
        self.tag_choice.clear()
        self.tag_choice.addItem("...")
        self.tag_choice.addItems(self.parse_container.tag_list)
        self.class_choice.clear()
        self.class_choice.addItem("...")
        self.class_choice.addItems(self.parse_container.class_list)
        self.id_choice.clear()
        self.id_choice.addItem("...")
        self.id_choice.addItems(self.parse_container.id_list)

    def update_current(self):
        if self.tag_choice.currentText() != "...":
            self.parse_container.current_tag = self.tag_choice.currentText()
        else:
            self.parse_container.current_tag = None
        if self.class_choice.currentText() != "...":
            self.parse_container.current_class = self.class_choice.currentText()
        else:
            self.parse_container.current_class = None
        if self.id_choice.currentText() != "...":
            self.parse_container.current_id = self.id_choice.currentText()
        else:
            self.parse_container.current_id = None
        if self.action_choice.currentText() != "...":
            self.parse_container.action = self.action_choice.currentText()
        else:
            self.parse_container.action = None
        self.parse_container.find_content_by_type()

        self.element_choice_2.clear()
        self.element_choice_2.addItem("...")
        self.element_choice_2.addItems(self.parse_container.content_list)
        self.stage_3()

    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.MiddleButton:
            self.move(self.pos() + event.globalPos() - self.dragPos)
            self.dragPos = event.globalPos()
            event.accept()


"""parse"""


class ParserContainer():
    def __init__(self, url=None):
        self.url = url
        self.tag_list = []
        self.class_list = []
        self.id_list = []
        self.current_tag = None
        self.current_class = None
        self.current_id = None
        self.content_list = []
        self.action = None
        self.action_value = None
        self.mark = None

    def return_arguments(self):
        return (
            self.url, self.current_tag, self.current_class, self.current_id, self.mark, self.action, self.action_value,
            None, None)

    def get_all_tag(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.tag_list = []
            for tag in soup.findAll(True):
                self.tag_list.append(tag.name)
            self.tag_list = list(set(self.tag_list))
            self.tag_list.sort()

    def get_all_class(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.class_list = set()
            tags = {tag.name for tag in soup.find_all()}
            for tag in tags:
                for i in soup.find_all(tag):
                    if i.has_attr("class"):
                        if len(i['class']) != 0:
                            self.class_list.add(" ".join(i['class']))
        self.class_list = list(self.class_list)
        self.class_list.sort()

    def get_all_id(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.id_list = set()
            tags = {tag.name for tag in soup.find_all()}
            for tag in tags:
                for i in soup.find_all(tag):
                    if i.has_attr("id"):
                        if len(i['id']) != 0:
                            self.id_list.add(" ".join(i['id']))
        self.id_list = list(self.id_list)
        self.id_list.sort()

    def find_content_by_type(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.content_list = []
            content = None
            content = soup.find_all(self.current_tag, class_=self.current_class, id=self.current_id)
            if content:
                for i in content:
                    self.content_list.append(i.get_text())


def check_website(url):
    try:
        page = requests.get(url)
        if page.status_code == 200:
            return True
        else:
            return False
    except:
        print("problem")


"""parse"""


class Dialog_add_label(QtWidgets.QLabel):
    def __init__(self, parent):
        super(Dialog_add_label, self).__init__(parent=parent)
        self.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                           "font-weight: 200;\n"
                           "font-size: 18px;\n"
                           "line-height: 10px;\n"
                           "text-decoration-line: underline;\n"
                           "background: rgba(44, 40, 40, 0.0);\n"
                           "color: rgba(255, 255, 255, 0.8);\n"
                           "\n"
                           "border: 0.5px solid rgba(167, 167, 167, 0.0);")
