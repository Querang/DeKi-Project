# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'template_parse_label.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import threading
import time
from datetime import datetime
import schedule
from PyQt5 import QtCore, QtGui, QtWidgets
from bs4 import BeautifulSoup
import requests
import parser_Firo.Firo_parse_sqlite as Firo_parse_sqlite


class MyThread(threading.Thread):

    # Thread class with a _stop() method.
    # The thread itself has to check
    # regularly for the stopped() condition.

    def __init__(self, *args, **keywords):
        threading.Thread.__init__(self, *args, **keywords)
        self.killed = False

    def __init__(self, *args, **keywords):
        threading.Thread.__init__(self, *args, **keywords)
        self.killed = False

    def start(self):
        self.__run_backup = self.run
        self.run = self.__run
        threading.Thread.start(self)

    def __run(self):
        sys.settrace(self.globaltrace)
        self.__run_backup()
        self.run = self.__run_backup

    def globaltrace(self, frame, event, arg):
        if event == 'call':
            return self.localtrace
        else:
            return None

    def localtrace(self, frame, event, arg):
        if self.killed:
            if event == 'line':
                raise SystemExit()
        return self.localtrace

    def kill(self):
        self.killed = True


class GenerateParseLabel(QtWidgets.QGroupBox):
    def __init__(self, main_obj, data, window_notify):
        super(GenerateParseLabel, self).__init__()
        """value"""
        self.window_notify = window_notify
        self.main_obj = main_obj
        self.push_icon = ''
        self.self_id, self.site_text_pull, self.tag_text, self.class_text, self.id_text, self.mark_text, self.action_text, self.action_value, self.notify, self.notify_time, self.pause, self.icon_path = data
        self.parser_container = ParserContainer()
        self.parser_container.url, self.parser_container.current_tag, self.parser_container.current_class, self.parser_container.current_id, self.parser_container.action = self.site_text_pull, self.tag_text, self.class_text, self.id_text, self.action_text
        self.amount_content = 0
        self.amount_unchecked_content = 0
        """value"""
        self.setMinimumSize(QtCore.QSize(398, 51))
        self.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.setTitle("")
        self.setObjectName("parser_label")
        self.parser_label_sub = QtWidgets.QFrame(self)
        self.parser_label_sub.setGeometry(QtCore.QRect(0, 0, 398, 51))
        self.parser_label_sub.setStyleSheet("background: #181818;")
        self.parser_label_sub.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.parser_label_sub.setFrameShadow(QtWidgets.QFrame.Raised)
        self.parser_label_sub.setObjectName("parser_label_sub")
        self.icon_mark = MenuIcon(self.parser_label_sub, self)
        self.icon_mark.setGeometry(QtCore.QRect(0, 0, 51, 51))
        self.icon_mark.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.icon_mark.setText("")
        self.icon_mark.setPixmap(QtGui.QPixmap(self.icon_path))
        self.icon_mark.setAlignment(QtCore.Qt.AlignCenter)
        self.icon_mark.setScaledContents(True)
        self.icon_mark.setObjectName("icon_mark")
        self.site_text = QtWidgets.QTextBrowser(self.parser_label_sub)
        self.site_text.setGeometry(QtCore.QRect(60, 4, 221, 21))
        self.site_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 300;\n"
                                     "font-size: 13px;\n"
                                     "line-height: 17px;\n"
                                     "text-decoration-line: underline;\n"
                                     "background: rgba(44, 40, 40, 0.0);\n"
                                     "color: #FFFFFF;\n"
                                     "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.site_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.site_text.setObjectName("site_text")
        self.element_text = QtWidgets.QLabel(self.parser_label_sub)
        self.element_text.setGeometry(QtCore.QRect(60, 26, 181, 21))
        self.element_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 17px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.element_text.setObjectName("element_text")
        self.pause_button = QtWidgets.QPushButton(self.parser_label_sub)
        self.pause_button.setGeometry(QtCore.QRect(300, 13, 21, 21))
        self.pause_button.setStyleSheet("color: #FFFFFF;\n"
                                        "background: rgba(199, 199, 199, 0.0);")
        self.pause_button.setText("")
        if self.pause == "True":
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("material/pause_1.png"), QtGui.QIcon.Normal,
                           QtGui.QIcon.Off)
            self.pause_button.setIcon(icon)
        else:
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("material/pause_2.png"), QtGui.QIcon.Normal,
                           QtGui.QIcon.Off)
            self.pause_button.setIcon(icon)
        self.pause_button.setIconSize(QtCore.QSize(14, 10))
        self.pause_button.setObjectName("pause_button")
        self.status_icon = QtWidgets.QPushButton(self.parser_label_sub)
        self.status_icon.setGeometry(QtCore.QRect(330, 13, 21, 21))
        self.status_icon.setStyleSheet("color: #FFFFFF;\n"
                                       "background: rgba(199, 199, 199, 0.0);")
        self.status_icon.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("material/good_connect_ver_2.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.status_icon.setIcon(icon1)
        self.status_icon.setIconSize(QtCore.QSize(16, 20))
        self.status_icon.setObjectName("status_icon")
        self.extend = MenuLabel(self, self.parser_label_sub)
        self.extend.setGeometry(QtCore.QRect(360, 13, 21, 21))
        self.extend.setStyleSheet("color: #FFFFFF;\n"
                                  "background: rgba(199, 199, 199, 0.0);")
        self.extend.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("material/tree_point.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.extend.setIcon(icon2)
        self.extend.setIconSize(QtCore.QSize(20, 20))
        self.extend.setObjectName("extend")
        self.briefly_info_frame = QtWidgets.QFrame(self)
        self.briefly_info_frame.setGeometry(QtCore.QRect(0, 53, 398, 131))
        self.briefly_info_frame.setStyleSheet("background: #181818;\n"
                                              "border: 1px solid #646464;")
        self.briefly_info_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.briefly_info_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.briefly_info_frame.setObjectName("briefly_info_frame")
        self.briefly_info = QtWidgets.QTextBrowser(self.briefly_info_frame)
        self.briefly_info.setGeometry(QtCore.QRect(10, 10, 398, 111))
        self.briefly_info.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 300;\n"
                                        "font-size: 13px;\n"
                                        "line-height: 10px;\n"
                                        "text-decoration-line: underline;\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.briefly_info.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.briefly_info.setObjectName("briefly_info")

        self.site_text.setHtml(
            f"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"{self.site_text_pull}\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">{self.site_text_pull}<br /><br /></span></p></body></html>")
        self.element_text.setText(f"amount: {self.amount_content} unchecked: {self.amount_unchecked_content}")
        self.briefly_info.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">site: {self.site_text_pull}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">tag: {self.tag_text}                          class:{self.class_text}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">action: {self.action_text}</span></p>\n"
            f"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt;\"><br /></p>\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">mark:{self.mark_text}</span></p></body></html>")
        self.pause_button.clicked.connect(self.pause_parse)
        self.ww = self.parser_container.check_website(self.site_text_pull)
        if self.ww:
            if self.pause == "True":
                self.hand = MyThread(target=self.handler_content_schedule)
                self.hand.start()

            else:
                self.hand = None
            self.handler_content()
        else:
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("material/mistake.png"),
                            QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.status_icon.setIcon(icon1)


    def up_amount(self):
        self.amount_unchecked_content = 0
        self.element_text.setText(f"amount: {self.amount_content} unchecked: {self.amount_unchecked_content}")

    def handler_content_schedule(self):
        # print(self.notify_time)
        if self.notify_time == "1 min":
            schedule.every(1).minute.do(self.handler_content).tag(f"{self.self_id}")
            while True:
                schedule.run_pending()
                time.sleep(1)
        elif self.notify_time == "15 min":
            schedule.every(15).minutes.do(self.handler_content).tag(f"{self.self_id}")
            while True:
                schedule.run_pending()
                time.sleep(1)
        elif self.notify_time == "1 hour":
            schedule.every(1).hour.do(self.handler_content).tag(f"{self.self_id}")
            while True:
                schedule.run_pending()
                time.sleep(1)
        elif self.notify_time == "5 hour":
            schedule.every(5).hours.do(self.handler_content).tag(f"{self.self_id}")
            while True:
                schedule.run_pending()
                time.sleep(1)
        elif self.notify_time == "10 hour":
            schedule.every(10).hours.do(self.handler_content).tag(f"{self.self_id}")
            while True:
                schedule.run_pending()
                time.sleep(1)

    def handler_content(self):
        conn = Firo_parse_sqlite.create_connection("parse_.db")
        print(self.self_id)
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        self.parser_container.find_content_by_type()
        content_stroke = [self.self_id, "\n".join(self.parser_container.content_list), current_time, "false"]
        """get last content or if None"""
        last_content = Firo_parse_sqlite.return_content(conn, self.self_id)
        print(content_stroke)
        if self.action_text == "keep track of content changes":
            if last_content:
                if last_content[0][1] != content_stroke[1]:
                    last_content.insert(0, content_stroke)
                    Firo_parse_sqlite.add_content(conn, last_content[:10])
                    if self.notify == "true":
                        if self.push_icon:
                            self.push_icon.reset_label()
                        else:
                            self.notify_push()
                else:
                    print("exist")

            else:
                last_content.insert(0, content_stroke)
                Firo_parse_sqlite.add_content(conn, last_content[:10])
                # if self.push_icon:
                #     self.push_icon.reset_label()
                # else:
                #     self.notify_push()

        elif self.action_text == "substring search":
            if self.action_value in content_stroke[1]:
                last_content.insert(0, content_stroke)
                Firo_parse_sqlite.add_content(conn, last_content[:10])
                self.notify_push()
                if self.notify == "true":
                    if self.push_icon:
                        self.push_icon.reset_label()
                    else:
                        self.notify_push()
            else:
                print("exist")
        self.amount_content = len(last_content)
        a = 0
        for i in last_content:
            if i[3] == "false":
                a += 1
        self.amount_unchecked_content = a
        self.element_text.setText(f"amount: {self.amount_content} unchecked: {self.amount_unchecked_content}")

    def notify_push(self):
        self.push_icon = NotifyIcon(self, self.amount_unchecked_content, self.icon_path)
        self.window_notify.verticalLayout_2.addWidget(self.push_icon)

    def mousePressEvent(self, e: QtGui.QMouseEvent):
        if e.button() == QtCore.Qt.MouseButton.LeftButton:
            content_window = Dialog_view_content(self, [self.main_obj.geometry().x(), self.main_obj.geometry().y()])
            content_window.exec_()
        else:
            e.ignore()

    def view_content_notify(self):
        content_window = Dialog_view_content(self, [self.main_obj.geometry().x(), self.main_obj.geometry().y()])
        content_window.exec_()

    def update_label(self):
        conn = Firo_parse_sqlite.create_connection("parse_.db")
        with conn:
            Firo_parse_sqlite.update_label(conn, self.self_id, self.notify, self.notify_time, self.pause,
                                           self.icon_path)
        schedule.clear(f"{self.self_id}")
        self.hand.kill()
        self.hand = MyThread(target=self.handler_content_schedule)
        self.hand.start()

    def pause_parse(self):
        if self.ww:
            if self.pause == "True":
                self.pause = "False"
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("material/pause_2.png"), QtGui.QIcon.Normal,
                               QtGui.QIcon.Off)
                self.pause_button.setIcon(icon)
            elif self.pause == "False":
                self.pause = "True"
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("material/pause_1.png"), QtGui.QIcon.Normal,
                               QtGui.QIcon.Off)
                self.pause_button.setIcon(icon)
            conn = Firo_parse_sqlite.create_connection("parse_.db")
            with conn:
                Firo_parse_sqlite.update_label(conn, self.self_id, self.notify, self.notify_time, self.pause,
                                               self.icon_path)
            if self.pause == "False":
                schedule.clear(f"{self.self_id}")
                self.hand.kill()

            if self.pause == "True":
                self.hand = None
                self.hand = MyThread(target=self.handler_content_schedule)
                self.hand.start()
            print(self.pause)


class NotifyIcon(QtWidgets.QWidget):
    def __init__(self, main_obj, label_value, icon_path):
        super(NotifyIcon, self).__init__()
        self.main_obj, self.label_value, self.icon_path = main_obj, label_value, icon_path
        self.setGeometry(QtCore.QRect(70, 320, 60, 60))
        self.setMinimumSize(QtCore.QSize(60, 60))
        self.setMaximumSize(QtCore.QSize(60, 60))
        self.setObjectName("widget")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.icon_path), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)

        self.notify = QtWidgets.QPushButton(self)
        self.notify.setGeometry(QtCore.QRect(0, 0, 60, 60))
        self.notify.setStyleSheet("border: 0.5px solid rgba(167, 167, 167, 0.0);\n"
                                  "background: #181818;\n"
                                  "border-radius: 5px;\n"
                                  "")
        self.notify.setText("")
        self.notify.setIcon(icon)
        self.notify.setIconSize(QtCore.QSize(50, 50))
        self.notify.setObjectName("notify")
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(48, 40, 16, 16))
        self.label.setStyleSheet("color: #FFFFFF;")
        self.label.setObjectName("label")
        self.label.setText(f"{self.label_value}")
        self.notify.clicked.connect(lambda: self.click_icon())

    def reset_label(self):
        self.label.setText(f"{self.main_obj.amount_unchecked_content}")

    def click_icon(self):
        self.main_obj.view_content_notify()
        self.deleteLater()


class MenuIcon(QtWidgets.QLabel):
    def __init__(self, label_obj, parent):
        super(MenuIcon, self).__init__(label_obj)
        self.label_obj = parent

    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()
        a = DialogIcon(self.label_obj, (self.dragPos.x(), self.dragPos.y()))
        a.exec_()


class DialogIcon(QtWidgets.QDialog):
    def __init__(self, label_obj, position):
        super(DialogIcon, self).__init__()
        self.label_obj = label_obj
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool)
        self.position_x, self.position_y = position
        self.setGeometry(QtCore.QRect(self.position_x, self.position_y + 10, 101, 101))
        self.frame_2 = QtWidgets.QFrame(self)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 101, 101))
        self.frame_2.setStyleSheet("background: #181818;\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.extend = MenuButton(self.frame_2, "material/mark_icon/bell.png")
        self.extend.setGeometry(QtCore.QRect(0, 0, 50, 50))
        self.extend_2 = MenuButton(self.frame_2, "material/mark_icon/bell_2.png")
        self.extend_2.setGeometry(QtCore.QRect(50, 0, 50, 50))
        self.extend_3 = MenuButton(self.frame_2, "material/mark_icon/bell_3.png")
        self.extend_3.setGeometry(QtCore.QRect(0, 50, 50, 50))
        self.extend_3.setIconSize(QtCore.QSize(40, 40))
        self.extend.clicked.connect(lambda: self.custom_icon("material/mark_icon/bell.png"))
        self.extend_2.clicked.connect(lambda: self.custom_icon("material/mark_icon/bell_2.png"))
        self.extend_3.clicked.connect(lambda: self.custom_icon("material/mark_icon/bell_3.png"))

    def custom_icon(self, path):
        self.label_obj.icon_mark.setPixmap(QtGui.QPixmap(path))
        conn = Firo_parse_sqlite.create_connection("parse_.db")
        with conn:
            Firo_parse_sqlite.update_label(conn, self.label_obj.self_id, self.label_obj.notify,
                                           self.label_obj.notify_time, self.label_obj.pause,
                                           path)
            self.deleteLater()


class MenuButton(QtWidgets.QPushButton):
    def __init__(self, parent, icon_path):
        super(MenuButton, self).__init__(parent=parent)
        self.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(icon_path), QtGui.QIcon.Normal,
                       QtGui.QIcon.Off)
        self.setIcon(icon)
        self.setIconSize(QtCore.QSize(50, 50))
        self.setStyleSheet(" QPushButton {"
                           "border: 0.5px solid rgba(167, 167, 167, 0.0);\n"
                           "background: rgba(199, 199, 199, 0.0);\n""color: rgba(255, 255, 255, 0.70);}\n"
                           "QPushButton:hover {\n"
                           "background: rgba(199, 199, 199, 0.2);}")


class MenuLabel(QtWidgets.QPushButton):

    def __init__(self, label_obj, parent):
        super(MenuLabel, self).__init__(parent)
        self.label_obj = label_obj

    def mousePressEvent(self, event):

        menu = QtWidgets.QMenu(self)
        menu.setStyleSheet("font-family: \'RobotoFlex\';\n"
                           "font-style: normal;\n"
                           "font-weight: 200;\n"
                           "font-size: 16px;\n"
                           "line-height: 75.4%;\n"
                           "/* or 14px */\n"
                           "background: rgba(199, 199, 199, 0.0);\n"
                           "border: 0.5px solid rgba(167, 167, 167, 0.01);\n"
                           "color: rgba(255, 255, 255, 0.85);\n"
                           "")
        Notify = menu.addMenu("Notify")
        Notify_1 = Notify.addAction("Yes")
        Notify_2 = Notify.addAction("No")
        Show = menu.addMenu("Show")
        Notify_time = menu.addMenu('Notify_time')
        Notify_time.addAction("1 min")
        Notify_time.addAction("15 min")
        Notify_time.addAction("1 hour")
        Notify_time.addAction("5 hour")
        Notify_time.addAction("10 hour")
        Notify_time.triggered.connect(self.actionClicked)
        Show_minimalistic = Show.addAction("Show_minimalistic")
        Show_extend = Show.addAction("Show_extend")
        Delete = menu.addAction("Delete")
        result = menu.exec_(self.mapToGlobal(event.pos()))

        if Delete == result:
            conn = Firo_parse_sqlite.create_connection("parse_.db")
            Firo_parse_sqlite.del_content(conn, self.label_obj.self_id)
            print("QQ")
            Firo_parse_sqlite.delete_label(conn, self.label_obj.self_id)
            print("QQ")
            self.label_obj.deleteLater()
        elif Show_extend == result:
            self.label_obj.setMinimumSize(QtCore.QSize(398, 181))
        elif Show_minimalistic == result:
            self.label_obj.setMinimumSize(QtCore.QSize(398, 51))
        elif Notify_1 == result:
            self.label_obj.notify = "True"
            self.label_obj.update_label()
        elif Notify_2 == result:
            self.label_obj.notify = "False"
            self.label_obj.update_label()
        elif result == result:
            pass

    @QtCore.pyqtSlot(QtWidgets.QAction)
    def actionClicked(self, action):
        self.label_obj.notify_time = action.text()
        self.label_obj.update_label()


class Dialog_view_content(QtWidgets.QDialog):
    def __init__(self, parent, position):
        super(Dialog_view_content, self).__init__()
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.parent = parent
        self.position_x, self.position_y = position
        self.setGeometry(QtCore.QRect(self.position_x + 500, self.position_y, 581, 655))
        self.resize(581, 655)
        self.setStyleSheet("background: #181818;\n"
                           "border: 1px solid #646464;")
        self.area_for_item = QtWidgets.QScrollArea(self)
        self.area_for_item.setGeometry(QtCore.QRect(10, 50, 551, 591))
        self.area_for_item.setStyleSheet("background: rgba(44, 40, 40, 0.0);\n"
                                         "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.area_for_item.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.area_for_item.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.area_for_item.setWidgetResizable(True)
        self.area_for_item.setObjectName("area_for_item")
        self.area_for_item_container = QtWidgets.QWidget()
        self.area_for_item_container.setGeometry(QtCore.QRect(0, 0, 549, 589))
        self.area_for_item_container.setObjectName("area_for_item_container")
        self.verticalLayout_2 = FlowLayout(self.area_for_item_container)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.area_for_item.setWidget(self.area_for_item_container)
        self.button_close = QtWidgets.QPushButton(self)
        self.button_close.setGeometry(QtCore.QRect(550, 10, 21, 23))
        self.button_close.setStyleSheet("QPushButton {\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 18px;\n"
                                        "line-height: 18px;\n"
                                        "border: 0px solid #646464;\n"
                                        "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                        "QPushButton:hover{\n"
                                        "color: rgba(255, 255, 255, 1.0)\n"
                                        "}")
        self.button_close.setObjectName("button_close")
        self.top_line = QtWidgets.QFrame(self)
        self.top_line.setGeometry(QtCore.QRect(10, 10, 536, 27))
        self.top_line.setStyleSheet("background: rgba(44, 40, 40, 0.0);")
        self.top_line.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.top_line.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_line.setObjectName("top_line")
        self.sait_text = QtWidgets.QTextBrowser(self.top_line)
        self.sait_text.setGeometry(QtCore.QRect(10, 1, 221, 21))
        self.sait_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 300;\n"
                                     "font-size: 13px;\n"
                                     "line-height: 17px;\n"
                                     "text-decoration-line: underline;\n"
                                     "background: rgba(44, 40, 40, 0.0);\n"
                                     "color: #FFFFFF;\n"
                                     "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.sait_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.sait_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.sait_text.setObjectName("sait_text")
        self.mark_text = QtWidgets.QTextBrowser(self.top_line)
        self.mark_text.setGeometry(QtCore.QRect(230, 1, 221, 21))
        self.mark_text.setStyleSheet("font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 300;\n"
                                     "font-size: 13px;\n"
                                     "line-height: 17px;\n"
                                     "text-decoration-line: underline;\n"
                                     "background: rgba(44, 40, 40, 0.0);\n"
                                     "color: #FFFFFF;\n"
                                     "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.mark_text.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.mark_text.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.mark_text.setObjectName("mark_text")
        self.button_close.setText("X")
        self.sait_text.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">{self.parent.site_text_pull}<br /><br /></span></p></body></html>")
        self.mark_text.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">| mark : {self.parent.mark_text}<br /><br /></span></p></body></html>")
        self.button_close.clicked.connect(lambda: self.deleteLater())
        self.load_content()

    def load_content(self):
        conn = Firo_parse_sqlite.create_connection("parse_.db")
        with conn:
            content = Firo_parse_sqlite.return_content(conn, self.parent.self_id)
            Firo_parse_sqlite.update_content(conn, self.parent.self_id)
            self.parent.up_amount()
        for item in content:
            print(item)
            self.verticalLayout_2.addWidget(ContentLabel(item, self.parent))

    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.MiddleButton:
            self.move(self.pos() + event.globalPos() - self.dragPos)
            self.dragPos = event.globalPos()
            event.accept()


class ContentLabel(QtWidgets.QWidget):
    def __init__(self, item, main_obj):
        super(ContentLabel, self).__init__()
        self.setGeometry(QtCore.QRect(0, 0, 536, 168))
        self.setMinimumSize(QtCore.QSize(536, 168))
        self.main_obj = main_obj
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(0, 0, 536, 168))
        self.frame.setStyleSheet("background: rgba(44, 40, 40, 0.0);border: 1px solid #646464;")
        self.id_label, self.text, self.time = item[0], item[1], item[2]
        self.descr_3 = QtWidgets.QTextBrowser(self.frame)
        self.descr_3.setGeometry(QtCore.QRect(0, 0, 491, 161))
        self.descr_3.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                   "font-weight: 200;\n"
                                   "font-size: 13px;\n"
                                   "line-height: 10px;\n"
                                   "text-decoration-line: underline;\n"
                                   "background: rgba(44, 40, 40, 0.0);\n"
                                   "color: rgba(255, 255, 255, 0.8);\n"
                                   "\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr_3.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setObjectName("descr_3")
        self.button_close = QtWidgets.QPushButton(self.frame)
        self.button_close.setGeometry(QtCore.QRect(510, 0, 21, 23))
        self.button_close.setStyleSheet("QPushButton {\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 18px;\n"
                                        "line-height: 18px;\n"
                                        "border: 0px solid #646464;\n"
                                        "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                        "QPushButton:hover{\n"
                                        "color: rgba(255, 255, 255, 1.0)\n"
                                        "}")
        self.button_close.setObjectName("button_close")
        self.time_label = QtWidgets.QTextBrowser(self.frame)
        self.time_label.setGeometry(QtCore.QRect(470, 140, 61, 31))
        self.time_label.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                      "font-weight: 200;\n"
                                      "font-size: 13px;\n"
                                      "line-height: 10px;\n"
                                      "text-decoration-line: underline;\n"
                                      "background: rgba(44, 40, 40, 0.0);\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "\n"
                                      "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.time_label.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.time_label.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.time_label.setObjectName("time_label")
        self.descr_3.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">{self.text}<br /><br /></span></p></body></html>")
        self.button_close.setText("X")
        print("qq")
        self.time_label.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Roboto Mono\'; font-size:13px; font-weight:296; font-style:normal;\">\n"
            f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt;\">{self.time}<br /><br /></span></p></body></html>")
        self.button_close.clicked.connect(self.del_content)

    def del_content(self):
        conn = Firo_parse_sqlite.create_connection("parse_.db")
        with conn:
            Firo_parse_sqlite.del_content_by_time(conn, self.id_label, self.time)
            self.main_obj.up_amount()
            self.deleteLater()


class FlowLayout(QtWidgets.QLayout):
    def __init__(self, parent=None, margin=0, hspacing=15, vspacing=10):
        super(FlowLayout, self).__init__(parent)
        self._hspacing = hspacing
        self._vspacing = vspacing
        self._items = []
        self.setContentsMargins(margin, 0, margin, margin)

    def __del__(self):
        del self._items[:]

    def addItem(self, item):
        self._items.append(item)

    def horizontalSpacing(self):
        if self._hspacing >= 0:
            return self._hspacing
        else:
            return self.smartSpacing(
                QtWidgets.QStyle.PM_LayoutHorizontalSpacing)

    def verticalSpacing(self):
        if self._vspacing >= 0:
            return self._vspacing
        else:
            return self.smartSpacing(
                QtWidgets.QStyle.PM_LayoutVerticalSpacing)

    def count(self):
        return len(self._items)

    def itemAt(self, index):
        if 0 <= index < len(self._items):
            return self._items[index]

    def takeAt(self, index):
        if 0 <= index < len(self._items):
            return self._items.pop(index)

    def expandingDirections(self):
        return QtCore.Qt.Orientations(0)

    def hasHeightForWidth(self):
        return True

    def heightForWidth(self, width):
        return self.doLayout(QtCore.QRect(0, 0, width, 0), True)

    def setGeometry(self, rect):
        super(FlowLayout, self).setGeometry(rect)
        self.doLayout(rect, False)

    def sizeHint(self):
        return self.minimumSize()

    def minimumSize(self):
        size = QtCore.QSize()
        for item in self._items:
            size = size.expandedTo(item.minimumSize())
        left, top, right, bottom = self.getContentsMargins()
        size += QtCore.QSize(left + right, top + bottom)
        return size

    def doLayout(self, rect, testonly):
        left, top, right, bottom = self.getContentsMargins()
        effective = rect.adjusted(+left, +top, -right, -bottom)
        x = effective.x()
        y = effective.y()
        lineheight = 0
        for item in self._items:
            widget = item.widget()
            hspace = self.horizontalSpacing()
            if hspace == -1:
                hspace = widget.style().layoutSpacing(
                    QtWidgets.QSizePolicy.PushButton,
                    QtWidgets.QSizePolicy.PushButton, QtCore.Qt.Horizontal)
            vspace = self.verticalSpacing()
            if vspace == -1:
                vspace = widget.style().layoutSpacing(
                    QtWidgets.QSizePolicy.PushButton,
                    QtWidgets.QSizePolicy.PushButton, QtCore.Qt.Vertical)
            nextX = x + item.sizeHint().width() + hspace
            if nextX - hspace > effective.right() and lineheight > 0:
                x = effective.x()
                y = y + lineheight + vspace
                nextX = x + item.sizeHint().width() + hspace
                lineheight = 0
            if not testonly:
                item.setGeometry(
                    QtCore.QRect(QtCore.QPoint(x, y), item.sizeHint()))
            x = nextX
            lineheight = max(lineheight, item.sizeHint().height())
        return y + lineheight - rect.y() + bottom

    def smartSpacing(self, pm):
        parent = self.parent()
        if parent is None:
            return -1
        elif parent.isWidgetType():
            return parent.style().pixelMetric(pm, None, parent)
        else:
            return parent.spacing()


class Dialog_get_date(QtWidgets.QDialog):
    def __init__(self, main_obj, position, window_notify):
        super(Dialog_get_date, self).__init__()
        self.window_notify = window_notify
        self.main_obj = main_obj
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.position_x, self.position_y = position
        self.setGeometry(QtCore.QRect(self.position_x + 550, self.position_y + 300, 517, 363))
        self.frame_site_1 = QtWidgets.QFrame(self)
        self.frame_site_1.setGeometry(QtCore.QRect(0, 0, 511, 55))
        self.frame_site_1.setStyleSheet("background: #181818;\n"
                                        "border: 1px solid #646464;\n"
                                        "box-sizing: border-box;\n"
                                        "border-radius: 4px;")
        self.frame_site_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_site_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_site_1.setObjectName("frame_site_1")
        self.site_label = Dialog_add_label(self.frame_site_1)
        self.site_label.setGeometry(QtCore.QRect(10, 9, 51, 31))
        self.site_label.setObjectName("site_label")
        self.site_line = QtWidgets.QLineEdit(self.frame_site_1)
        self.site_line.setGeometry(QtCore.QRect(80, 16, 341, 21))
        self.site_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.site_line.setInputMask("")
        self.site_line.setText("")
        self.site_line.setPlaceholderText("your sait")
        self.site_line.setObjectName("site_line")

        self.button_close = QtWidgets.QPushButton(self.frame_site_1)
        self.button_close.setGeometry(QtCore.QRect(484, 1, 21, 23))
        self.button_close.setStyleSheet("QPushButton {\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 18px;\n"
                                        "line-height: 18px;\n"
                                        "border: 0px solid #646464;\n"
                                        "color: rgba(255, 255, 255, 0.8);background: rgba(23, 23, 23, 0.0);}\n"
                                        "QPushButton:hover{\n"
                                        "color: rgba(255, 255, 255, 1.0)\n"
                                        "}")
        self.button_close.setObjectName("button_close")
        self.frame_element_2 = QtWidgets.QFrame(self)
        self.frame_element_2.setGeometry(QtCore.QRect(0, 56, 511, 121))
        self.frame_element_2.setStyleSheet("background: #181818;\n"
                                           "border: 1px solid #646464;\n"
                                           "box-sizing: border-box;\n"
                                           "border-radius: 4px;")
        self.frame_element_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_element_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_element_2.setObjectName("frame_element_2")
        self.tag_label = Dialog_add_label(self.frame_element_2)
        self.tag_label.setGeometry(QtCore.QRect(10, 5, 61, 31))
        self.tag_label.setObjectName("tag_label")
        self.element_label = Dialog_add_label(self.frame_element_2)
        self.element_label.setGeometry(QtCore.QRect(10, 76, 81, 31))
        self.element_label.setObjectName("element_label")
        self.tag_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.tag_choice.setGeometry(QtCore.QRect(90, 10, 241, 20))
        self.tag_choice.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.tag_choice.setDuplicatesEnabled(False)
        self.tag_choice.setFrame(True)
        self.tag_choice.setObjectName("tag_choice")
        self.element_choice_2 = QtWidgets.QComboBox(self.frame_element_2)
        self.element_choice_2.setGeometry(QtCore.QRect(90, 82, 241, 20))
        self.element_choice_2.setStyleSheet("background: #2B2B2B;\n"
                                            "border-radius: 4px;\n"
                                            "font-family: \'Roboto Mono\';\n"
                                            "font-style: normal;\n"
                                            "font-weight: 400;\n"
                                            "font-size: 14px;\n"
                                            "line-height: 18px;\n"
                                            "\n"
                                            "color: rgba(255, 255, 255, 0.8);\n"
                                            "")
        self.element_choice_2.setDuplicatesEnabled(False)
        self.element_choice_2.setFrame(True)
        self.element_choice_2.setObjectName("element_choice_2")
        self.class_label = QtWidgets.QLabel(self.frame_element_2)
        self.class_label.setGeometry(QtCore.QRect(10, 40, 61, 31))
        self.class_label.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                       "font-weight: 200;\n"
                                       "font-size: 18px;\n"
                                       "line-height: 10px;\n"
                                       "text-decoration-line: underline;\n"
                                       "background: rgba(44, 40, 40, 0.0);\n"
                                       "color: rgba(255, 255, 255, 0.8);\n"
                                       "\n"
                                       "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.class_label.setObjectName("class_label")
        self.class_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.class_choice.setGeometry(QtCore.QRect(90, 45, 151, 20))
        self.class_choice.setStyleSheet("background: #2B2B2B;\n"
                                        "border-radius: 4px;\n"
                                        "font-family: \'Roboto Mono\';\n"
                                        "font-style: normal;\n"
                                        "font-weight: 400;\n"
                                        "font-size: 14px;\n"
                                        "line-height: 18px;\n"
                                        "\n"
                                        "color: rgba(255, 255, 255, 0.8);\n"
                                        "")
        self.class_choice.setDuplicatesEnabled(False)
        self.class_choice.setFrame(True)
        self.class_choice.setObjectName("class_choice")
        self.id_label = QtWidgets.QLabel(self.frame_element_2)
        self.id_label.setGeometry(QtCore.QRect(260, 40, 41, 31))
        self.id_label.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                    "font-weight: 200;\n"
                                    "font-size: 18px;\n"
                                    "line-height: 10px;\n"
                                    "text-decoration-line: underline;\n"
                                    "background: rgba(44, 40, 40, 0.0);\n"
                                    "color: rgba(255, 255, 255, 0.8);\n"
                                    "\n"
                                    "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.id_label.setObjectName("id_label")
        self.id_choice = QtWidgets.QComboBox(self.frame_element_2)
        self.id_choice.setGeometry(QtCore.QRect(310, 45, 161, 20))
        self.id_choice.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.id_choice.setDuplicatesEnabled(False)
        self.id_choice.setFrame(True)
        self.id_choice.setObjectName("id_choice")
        self.frame_lock_1 = QtWidgets.QFrame(self.frame_element_2)
        self.frame_lock_1.setGeometry(QtCore.QRect(0, 0, 511, 121))
        self.frame_lock_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_lock_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_lock_1.setObjectName("frame_lock_1")
        self.descr = QtWidgets.QTextBrowser(self.frame_lock_1)
        self.descr.setGeometry(QtCore.QRect(90, 40, 211, 41))
        self.descr.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                 "font-weight: 200;\n"
                                 "font-size: 13px;\n"
                                 "line-height: 10px;\n"
                                 "text-decoration-line: underline;\n"
                                 "background: rgba(44, 40, 40, 0.0);\n"
                                 "color: rgba(255, 255, 255, 0.8);\n"
                                 "\n"
                                 "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr.setObjectName("descr")
        self.lock_label = QtWidgets.QLabel(self.frame_lock_1)
        self.lock_label.setEnabled(True)
        self.lock_label.setGeometry(QtCore.QRect(300, 20, 51, 51))
        self.lock_label.setStyleSheet("\n"
                                      "background: rgba(44, 40, 40, 0.0);\n"
                                      "\n"
                                      "\n"
                                      "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.lock_label.setText("")
        self.lock_label.setPixmap(QtGui.QPixmap("material/lock_icon_02.png"))
        self.lock_label.setScaledContents(True)
        self.lock_label.setObjectName("lock_label")
        self.frame_action_3 = QtWidgets.QFrame(self)
        self.frame_action_3.setGeometry(QtCore.QRect(0, 178, 511, 80))
        self.frame_action_3.setStyleSheet("background: #181818;\n"
                                          "border: 1px solid #646464;\n"
                                          "box-sizing: border-box;\n"
                                          "border-radius: 4px;")
        self.frame_action_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_action_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_action_3.setObjectName("frame_action_3")
        self.mark_line = QtWidgets.QLineEdit(self.frame_action_3)
        self.mark_line.setGeometry(QtCore.QRect(80, 46, 341, 21))
        self.mark_line.setStyleSheet("background: #2B2B2B;\n"
                                     "border-radius: 4px;\n"
                                     "font-family: \'Roboto Mono\';\n"
                                     "font-style: normal;\n"
                                     "font-weight: 400;\n"
                                     "font-size: 14px;\n"
                                     "line-height: 18px;\n"
                                     "\n"
                                     "color: rgba(255, 255, 255, 0.8);\n"
                                     "")
        self.mark_line.setInputMask("")
        self.mark_line.setText("")
        self.mark_line.setPlaceholderText("maybe you want mark this parser?")
        self.mark_line.setObjectName("mark_line")
        self.label_4 = Dialog_add_label(self.frame_action_3)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 81, 31))
        self.label_4.setObjectName("label_4")
        self.label_5 = Dialog_add_label(self.frame_action_3)
        self.label_5.setGeometry(QtCore.QRect(10, 40, 81, 31))
        self.label_5.setObjectName("label_5")
        self.action_choice = QtWidgets.QComboBox(self.frame_action_3)
        self.action_choice.setGeometry(QtCore.QRect(90, 17, 171, 20))
        self.action_choice.setStyleSheet("background: #2B2B2B;\n"
                                         "border-radius: 4px;\n"
                                         "font-family: \'Roboto Mono\';\n"
                                         "font-style: normal;\n"
                                         "font-weight: 400;\n"
                                         "font-size: 14px;\n"
                                         "line-height: 18px;\n"
                                         "\n"
                                         "color: rgba(255, 255, 255, 0.8);\n"
                                         "")
        self.action_choice.setDuplicatesEnabled(False)
        self.action_choice.setFrame(True)
        self.action_choice.setObjectName("action_choice")
        self.value_line = QtWidgets.QLineEdit(self.frame_action_3)
        self.value_line.setGeometry(QtCore.QRect(290, 17, 191, 20))
        self.value_line.setStyleSheet("background: #2B2B2B;\n"
                                      "border-radius: 4px;\n"
                                      "font-family: \'Roboto Mono\';\n"
                                      "font-style: normal;\n"
                                      "font-weight: 400;\n"
                                      "font-size: 14px;\n"
                                      "line-height: 18px;\n"
                                      "\n"
                                      "color: rgba(255, 255, 255, 0.8);\n"
                                      "")
        self.value_line.setInputMask("")
        self.value_line.setText("")
        self.value_line.setPlaceholderText("input value")
        self.value_line.setObjectName("value_line")
        self.frame_lock_2 = QtWidgets.QFrame(self.frame_action_3)
        self.frame_lock_2.setGeometry(QtCore.QRect(0, 0, 511, 80))
        self.frame_lock_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_lock_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_lock_2.setObjectName("frame_lock_2")
        self.descr_2 = QtWidgets.QTextBrowser(self.frame_lock_2)
        self.descr_2.setGeometry(QtCore.QRect(90, 20, 211, 41))
        self.descr_2.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                   "font-weight: 200;\n"
                                   "font-size: 13px;\n"
                                   "line-height: 10px;\n"
                                   "text-decoration-line: underline;\n"
                                   "background: rgba(44, 40, 40, 0.0);\n"
                                   "color: rgba(255, 255, 255, 0.8);\n"
                                   "\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_2.setObjectName("descr_2")
        self.lock_label_1 = QtWidgets.QLabel(self.frame_lock_2)
        self.lock_label_1.setEnabled(True)
        self.lock_label_1.setGeometry(QtCore.QRect(300, 10, 51, 51))
        self.lock_label_1.setStyleSheet("\n"
                                        "background: rgba(44, 40, 40, 0.0);\n"
                                        "\n"
                                        "\n"
                                        "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.lock_label_1.setText("")
        self.lock_label_1.setPixmap(QtGui.QPixmap("material/lock_icon_02.png"))
        self.lock_label_1.setScaledContents(True)
        self.lock_label_1.setObjectName("lock_label_1")
        self.save_button = QtWidgets.QPushButton(self)
        self.save_button.setGeometry(QtCore.QRect(0, 259, 511, 25))
        self.save_button.setStyleSheet("\n"
                                       "font: 8pt \"NSimSun\";\n"
                                       "font-style: normal;\n"
                                       "font-weight: 300;\n"
                                       "font-size: 18px;\n"
                                       "line-height: 32px;\n"
                                       "\n"
                                       "color: #FFFFFF;background: #181818;\n"
                                       "border: 1px solid #646464;\n"
                                       "box-sizing: border-box;\n"
                                       "border-radius: 4px;")
        self.save_button.setObjectName("save_button")
        self.site_label.setText("Site:")
        self.button_close.setText("X")
        self.tag_label.setText("Tag:")
        self.element_label.setText("Content:")
        self.class_label.setText("class:")
        self.id_label.setText("id:")
        self.descr.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:13px;\">The seal is unlocked if you fill in the item above.</span></p></body></html>")
        self.label_4.setText("Action:")
        self.label_5.setText("Mark:")
        self.descr_2.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:13px;\">The seal is unlocked if you fill in the item above.</span></p></body></html>")
        self.save_button.setText("-- serfing --")
        self.frame_success = QtWidgets.QFrame(self)
        self.frame_success.setGeometry(QtCore.QRect(110 - 60, 100 - 20, 421, 121))
        self.frame_success.setStyleSheet("background: #181818;\n"
                                         "border: 1px solid #646464;\n"
                                         "box-sizing: border-box;\n"
                                         "border-radius: 4px;")
        self.frame_success.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_success.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_success.setObjectName("frame_success")
        self.descr_3 = QtWidgets.QTextBrowser(self.frame_success)
        self.descr_3.setGeometry(QtCore.QRect(90, 20, 251, 71))
        self.descr_3.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                                   "font-weight: 200;\n"
                                   "font-size: 13px;\n"
                                   "line-height: 10px;\n"
                                   "text-decoration-line: underline;\n"
                                   "background: rgba(44, 40, 40, 0.0);\n"
                                   "color: rgba(255, 255, 255, 0.8);\n"
                                   "\n"
                                   "border: 0.5px solid rgba(167, 167, 167, 0.0);")
        self.descr_3.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.descr_3.setObjectName("descr_3")

        self.descr_3.setHtml(
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'NSimSun\'; font-size:13px; font-weight:200; font-style:normal;\">\n"
            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">Success!</span></p>\n"
            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Firo believes in you and hopes that you did not just click.</span></p></body></html>")

        """set fun"""
        self.site_line.textChanged.connect(self.stage_1)
        self.tag_choice.setMinimumContentsLength(40)
        self.class_choice.setMinimumContentsLength(40)
        self.element_choice_2.setMinimumContentsLength(40)
        self.button_close.clicked.connect(lambda: self.deleteLater())
        self.save_button.clicked.connect(self.save_note)
        """success"""
        """hide"""
        self.value_line.hide()
        self.frame_success.hide()
        """value"""
        self.parse_container = ParserContainer()
        # self.site_url = "https://bik.sfu-kras.ru/elib/view?id=BOOK1-84%284%D0%90%29-444/%D0%9C%20805-521870"
        self.action_list = ["...", "keep track of content changes", "substring search"
                            ]  # set condition меет 3 подпункта на условия
        self.action_choice.addItems(self.action_list)

    def stage_1(self):
        self.site_url = self.site_line.text()
        if self.parse_container.check_website(self.site_url):
            self.frame_lock_1.hide()
            self.stage_2(self.site_url)
        else:
            self.frame_lock_1.show()

    def stage_2(self, site_url):
        self.parse_container.url = site_url
        self.parse_container.get_all_tag()
        self.parse_container.get_all_class()
        self.parse_container.get_all_id()
        self.load_checkbox()
        self.tag_choice.currentTextChanged.connect(lambda: self.update_current())
        self.class_choice.currentTextChanged.connect(lambda: self.update_current())
        self.id_choice.currentTextChanged.connect(lambda: self.update_current())
        self.action_choice.currentTextChanged.connect(lambda: self.update_current())

    def stage_3(self):
        if self.parse_container.content_list:
            self.frame_lock_2.hide()
        else:
            self.frame_lock_2.show()

    def save_note(self):
        if self.parse_container.action is not None:
            conn = Firo_parse_sqlite.create_connection("parse_.db")
            with conn:
                id_label = Firo_parse_sqlite.add_received_data(conn, self.parse_container.return_arguments())
                self.frame_success.show()
                try:
                    self.main_obj.verticalLayout_2.addWidget(
                        GenerateParseLabel(self.main_obj, (id_label,) + self.parse_container.return_arguments(),
                                           self.window_notify))
                except:
                    print("fail")
                threading.Thread(target=self.close_dialog).start()

    def close_dialog(self):
        time.sleep(3)
        self.deleteLater()

    def load_checkbox(self):
        self.tag_choice.clear()
        self.tag_choice.addItem("...")
        self.tag_choice.addItems(self.parse_container.tag_list)
        self.class_choice.clear()
        self.class_choice.addItem("...")
        self.class_choice.addItems(self.parse_container.class_list)
        self.id_choice.clear()
        self.id_choice.addItem("...")
        self.id_choice.addItems(self.parse_container.id_list)

    def update_current(self):
        if self.tag_choice.currentText() != "...":
            self.parse_container.current_tag = self.tag_choice.currentText()
        else:
            self.parse_container.current_tag = None
        if self.class_choice.currentText() != "...":
            self.parse_container.current_class = self.class_choice.currentText()
        else:
            self.parse_container.current_class = None
        if self.id_choice.currentText() != "...":
            self.parse_container.current_id = self.id_choice.currentText()
        else:
            self.parse_container.current_id = None
        if self.action_choice.currentText() != "...":
            self.parse_container.action = self.action_choice.currentText()
            if self.action_choice.currentText() == "substring search":
                self.value_line.show()
        else:
            self.parse_container.action = None
        self.parse_container.find_content_by_type()

        self.element_choice_2.clear()
        self.element_choice_2.addItem("...")
        self.element_choice_2.addItems(self.parse_container.content_list)
        self.stage_3()

    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.MiddleButton:
            self.move(self.pos() + event.globalPos() - self.dragPos)
            self.dragPos = event.globalPos()
            event.accept()


"""parse"""


class ParserContainer():
    def __init__(self, url=None):
        self.url = url
        self.tag_list = []
        self.class_list = []
        self.id_list = []
        self.current_tag = None
        self.current_class = None
        self.current_id = None
        self.content_list = []
        self.action = None
        self.action_value = None
        self.mark = None

    def return_arguments(self):
        return (
            self.url, self.current_tag, self.current_class, self.current_id, self.mark, self.action, self.action_value,"false",
            "15 min", "True", "material/mark_icon/bell.png")

    def get_all_tag(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.tag_list = []
            for tag in soup.findAll(True):
                self.tag_list.append(tag.name)
            self.tag_list = list(set(self.tag_list))
            self.tag_list.sort()

    def get_all_class(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.class_list = set()
            tags = {tag.name for tag in soup.find_all()}
            for tag in tags:
                for i in soup.find_all(tag):
                    if i.has_attr("class"):
                        if len(i['class']) != 0:
                            self.class_list.add(" ".join(i['class']))
        self.class_list = list(self.class_list)
        self.class_list.sort()

    def get_all_id(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.id_list = set()
            tags = {tag.name for tag in soup.find_all()}
            for tag in tags:
                for i in soup.find_all(tag):
                    if i.has_attr("id"):
                        if len(i['id']) != 0:
                            self.id_list.add(" ".join(i['id']))
        self.id_list = list(self.id_list)
        self.id_list.sort()

    def find_content_by_type(self):
        if self.url is not None:
            page = requests.get(self.url)
            soup = BeautifulSoup(page.text, "html.parser")
            self.content_list = []
            content = None
            content = soup.find_all(self.current_tag, class_=self.current_class, id=self.current_id)
            if content:
                for i in content:
                    self.content_list.append(i.get_text())
            # print(self.content_list)

    @staticmethod
    def check_website(url):
        try:
            page = requests.get(url)
            if page.status_code == 200:
                print("connect success")
                return True
            else:
                print("connect fail")
                return False
        except:
            print("problem in request")


"""parse"""


class Dialog_add_label(QtWidgets.QLabel):
    def __init__(self, parent):
        super(Dialog_add_label, self).__init__(parent=parent)
        self.setStyleSheet("font: 8pt \"NSimSun\";;\n"
                           "font-weight: 200;\n"
                           "font-size: 18px;\n"
                           "line-height: 10px;\n"
                           "text-decoration-line: underline;\n"
                           "background: rgba(44, 40, 40, 0.0);\n"
                           "color: rgba(255, 255, 255, 0.8);\n"
                           "\n"
                           "border: 0.5px solid rgba(167, 167, 167, 0.0);")
